AWSTemplateFormatVersion: 2010-09-09
Description: >
  cf_FaceRekognitionServiceV1.2.0.yaml: v1.2.0 -

  Create Face Recoginition Service based on Lambda, S3, Rekogintion and Polly
  Requires: Source code for 
    - LambdaIndexFaces.zip
    - LambdaGenerateVoiceMsgWithPolly.zip
    - LambdaMatchFacesRekognitionService.zip
    
    located in a S3 bucket which is referenced in CodeRepositoryBucket Parameter
# Stack Parameters
Parameters:
  FaceRekognitionBucket:
    Type: String
    AllowedPattern: '[a-z0-9_.\-]+'
    Description: Name of Amazon S3 bucket for image upload and processing
  DynamoDBTableName:
    Type: String
    AllowedPattern: '[a-zA-Z0-9_.\-]+'
    Description: Name of Amazon DynamoDB table to hold face metadata
  FaceRekognitionCollectionName:
    Type: String
    AllowedPattern: '[a-zA-Z0-9_.\-]+'
    Description: Name of Amazon Rekognition collection name
  CodeRepositoryBucket:
    Type: String
    AllowedPattern: '[a-z0-9_.\-]+'
    Description: S3 Bucket name where Lambda code "lambda_function.zip" is located

Resources:
  
  # General role that will be used for Lambda execution
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LambdaExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:Get*'
                  - 's3:Head*'
                  - 's3:DeleteObject'
                  - 's3:Describe*'
                  - 's3:PutObject'
                Resource: !Sub 'arn:aws:s3:::${FaceRekognitionBucket}/*'
              - Effect: Allow
                Action:
                  - 's3:List*'
                  - 's3:Describe*'
                  - 's3:GetBucketLocation'
                Resource: !Sub 'arn:aws:s3:::${FaceRekognitionBucket}'
              - Effect: Allow
                Action:
                  - 'rekognition:IndexFaces'
                  - 'rekognition:SearchFaces'
                  - 'rekognition:SearchFacesByImage'
                  - 'rekognition:ListFaces'
                  - 'rekognition:CompareFaces'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:GetRecords'
                  - 'dynamodb:ListTables'
                  - 'dynamodb:Query'
                Resource: !Join 
                  - ''
                  - - !Join 
                      - ':'
                      - - arn
                        - aws
                        - dynamodb
                        - !Ref 'AWS::Region'
                        - !Ref 'AWS::AccountId'
                    - ':table/'
                    - !Ref DynamoDBTableName
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Join 
                  - ''
                  - - !Join 
                      - ':'
                      - - arn
                        - aws
                        - sns
                        - !Ref 'AWS::Region'
                        - !Ref 'AWS::AccountId'
                        - PollySpeechSNSTopic
              - Effect: Allow
                Action:
                  - 'polly:SynthesizeSpeech'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iot:Receive'
                  - 'iot:Publish'
                Resource: '*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 340f2674-9734-4740-bcec-2597106f835b
  
  # Role that allows Rekognition collection creation during stack creation
  BootstrapExecutionRoleRekognition:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: AmazonRekognition
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'rekognition:CreateCollection'
                  - 'rekognition:DeleteCollection'
                  - 'rekognition:ListCollections'
                Resource: '*'
        - PolicyName: AWSLambdaLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a466013b-0159-403b-abb8-d753ee0f3fdf
  
  # Role that allows access to SNS topic and will be used to trigger Lambda function that creates default MP3 file
  BootstrapExecutionRoleSNS:
    Type: 'AWS::IAM::Role'
    DependsOn:
     - PollySpeechSNSTopic
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: SNSPublisher
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Join 
                  - ''
                  - - !Join 
                      - ':'
                      - - arn
                        - aws
                        - sns
                        - !Ref 'AWS::Region'
                        - !Ref 'AWS::AccountId'
                        - PollySpeechSNSTopic
        - PolicyName: AWSLambdaLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
  
  # Role that allows access to S3 FaceRekognition Bucket, will be used to create the folders during Stack creation
  BootstrapExecutionRoleS3:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /service-role/
      Policies:
        - PolicyName: S3Writer
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:DeleteObject'
                  - 's3:PutObject'
                Resource: !Sub 'arn:aws:s3:::${FaceRekognitionBucket}/*'
              - Effect: Allow
                Action:
                  - 's3:List*'
                  - 's3:Describe*'
                Resource: !Sub 'arn:aws:s3:::${FaceRekognitionBucket}'
        - PolicyName: AWSLambdaLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
    DependsOn:
      - RekognitionBucket
  
  # Permission for S3 to trigger Lambda for uploads to /index
  IndexLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt 
        - LambdaIndexFaces
        - Arn
      Principal: s3.amazonaws.com
      SourceArn: !Join 
        - ':'
        - - arn
          - aws
          - s3
          - ''
          - ''
          - !Ref FaceRekognitionBucket
      SourceAccount: !Ref 'AWS::AccountId'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 08132226-bebe-4358-8846-4f52a3fd8fc1
  
  # Permission for S3 to trigger Lambda for uploads to /matches
  FaceMatchLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: !GetAtt 
        - LambdaMatchFacesRekognitionService
        - Arn
      Principal: s3.amazonaws.com
      SourceArn: !Join 
        - ':'
        - - arn
          - aws
          - s3
          - ''
          - ''
          - !Ref FaceRekognitionBucket
      SourceAccount: !Ref 'AWS::AccountId'
  
  # Permission for SNS to trigger Lambda 
  SNSLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: sns.amazonaws.com
      SourceArn: !Ref PollySpeechSNSTopic
      FunctionName: !Ref LambdaGenerateVoiceMsgWithPolly
  
  # Define Services
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: RekognitionId
          AttributeType: S
      KeySchema:
        - AttributeName: RekognitionId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      TableName: !Ref DynamoDBTableName
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 14614f36-a95d-497e-8ad7-387f8f31678e
  
  # Lambda function that is used to index new faces in Rekognition collection
  LambdaIndexFaces:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - LambdaExecutionRole
    Properties:
      FunctionName: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - LambdaIndexFaces
      Code:
        S3Bucket: !Ref CodeRepositoryBucket
        S3Key: LambdaIndexFaces.zip
      Description: >-
        Triggered by S3, indexes faces against a collection in Amazon
        Rekognition
      Handler: LambdaIndexFaces.lambda_handler
      MemorySize: 128
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Runtime: python2.7
      Timeout: 5
      Environment:
        Variables:
          TABLE: !Ref DynamoDBTableName
          COLLECTION: !Ref FaceRekognitionCollectionName
          SNS_TOPIC_ARN: !Ref PollySpeechSNSTopic
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 04bb069f-14a4-4647-bd01-3bdcde747208
  
  # Bootstrap Lambda function that is used during stack creation to create a new Rekognition collection      
  LambdaBootstrapCreateCollection:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Custom resource function to create Rekognition collection
      FunctionName: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - LambdaBootstrapCreateCollection
      Handler: index.lambda_handler
      Role: !GetAtt 
        - BootstrapExecutionRoleRekognition
        - Arn
      Runtime: python2.7
      Timeout: 10
      Code:
        ZipFile: !Sub |
          import boto3  
          import json
          import cfnresponse
          import logging
          import traceback

          def lambda_handler(event, context):
              
                print ('received event:' + json.dumps(event, indent=2))
                
                rekognition = boto3.client('rekognition')
                logger = logging.getLogger()

                if event['RequestType'] == 'Delete':
                    try:
                        ret = rekognition.delete_collection(CollectionId='${FaceRekognitionCollectionName}')
                        if ret['ResponseMetadata']['HTTPStatusCode'] == 200:
                            print ('Resource deleted')
                            cfnresponse.send(event, context, "SUCCESS", {})
                        return
                    except:
                        logger.error("error: {0}".format(traceback.format_exc()));
                        cfnresponse.send(event, context, "FAILED", {})
                else:
                    try:
                        ret = rekognition.create_collection(CollectionId='${FaceRekognitionCollectionName}')
                        if ret['ResponseMetadata']['HTTPStatusCode'] == 200:
                            print ('Resource created')
                            cfnresponse.send(event, context, "SUCCESS", {})
                    except:
                        logger.error("error: {0}".format(traceback.format_exc()));
                        cfnresponse.send(event, context, "FAILED", {})
               
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c2237c0c-1b0c-4308-8a1f-640c73c09698
  CfPopulateCreateCollection:
    Type: 'Custom::BootstrapCreateCollection'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 
        - LambdaBootstrapCreateCollection
        - Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f32940fc-7666-4ab4-bcf7-3a73bd352908
  
  # Lambda function that is used to match images against Rekognition collection with known faces and 
  # to communicate with the client via MQTT
  LambdaMatchFacesRekognitionService:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - LambdaMatchFacesRekognitionService
      Handler: LambdaMatchFacesRekognitionService.lambda_handler
      Runtime: python2.7
      Description: Face Rekognition Service
      MemorySize: 128
      Timeout: 45
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Code:
        S3Bucket: !Ref CodeRepositoryBucket
        S3Key: LambdaMatchFacesRekognitionService.zip
      Environment:
        Variables:
          REGION: !Ref 'AWS::Region'
          COLLECTION: !Ref FaceRekognitionCollectionName
          TABLE: !Ref DynamoDBTableName
  
  # Lambda funtion that synthesizes text to speech with Polly
  LambdaGenerateVoiceMsgWithPolly:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - LambdaGenerateVoiceMsgWithPolly
      Handler: LambdaGenerateVoiceMsgWithPolly.lambda_handler
      Runtime: python2.7
      Description: MP3 Creation with Polly for Rekognition Service
      MemorySize: 128
      Timeout: 45
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Code:
        S3Bucket: !Ref CodeRepositoryBucket
        S3Key: LambdaGenerateVoiceMsgWithPolly.zip
      Environment:
        Variables:
          BUCKET_NAME: !Ref FaceRekognitionBucket
  
  # SNS topic that is used to trigger LambdaGenerateVoiceMsgWithPolly
  PollySpeechSNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: PollySpeechSNSTopic
      TopicName: PollySpeechSNSTopic
      Subscription:
        - Endpoint: !GetAtt 
            - LambdaGenerateVoiceMsgWithPolly
            - Arn
          Protocol: lambda
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 1e163669-10c9-4a45-8569-1c00c098e7c3
  
  # Bootstrap Lambda function that is used to create required folders on S3 bucket during stack creation
  LambdaBootstrapCreateS3Folders:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Custom resource function to create Folders /index and /matches on S3
      FunctionName: !Join 
        - '-'
        - - !Ref 'AWS::StackName'
          - LambdaBootstrapCreateS3Folder
      Handler: index.lambda_handler
      Role: !GetAtt 
        - BootstrapExecutionRoleS3
        - Arn
      Runtime: python2.7
      Timeout: 10
      Code:
        ZipFile: !Sub |
          import boto3  
          import json
          import cfnresponse
          import logging
          import traceback

          def lambda_handler(event, context):
              
                print ('received event:' + json.dumps(event, indent=2))
                
                s3 = boto3.client('s3')
                paths = ['index/','matches/','mp3/']
                
                logger = logging.getLogger()

                if event['RequestType'] == 'Delete':
                    try:
                        for p in paths: 
                            ret = s3.delete_object(Bucket='${FaceRekognitionBucket}', Key=p)
                            if ret['ResponseMetadata']['HTTPStatusCode'] == 200:
                                print ('Folder ' +p+ 'deleted')
                        cfnresponse.send(event, context, "SUCCESS", {})
                    except:
                        logger.error("error: {0}".format(traceback.format_exc()));
                        cfnresponse.send(event, context, "FAILED", {})   
                else:
                    try:
                        for p in paths: 
                            print(p)
                            ret = s3.put_object(Bucket='${FaceRekognitionBucket}',Body='', Key=p)
                            if ret['ResponseMetadata']['HTTPStatusCode'] == 200:
                                print ('Folder ' +p+ 'created')
                        cfnresponse.send(event, context, "SUCCESS", {})
                    except:
                        logger.error("error: {0}".format(traceback.format_exc()));
                        cfnresponse.send(event, context, "FAILED", {})
               
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c2237c0c-1b0c-4308-8a1f-640c73c09698
  
  # Custom resource that triggers lambda bootstrap function that creates folders on S3  
  CfBootstrapCreateS3Folders:
        Type: 'Custom::LambdaBootstrapCreateS3Folders'
        Version: '1.0'
        Properties:
          ServiceToken: !GetAtt 
            - LambdaBootstrapCreateS3Folders
            - Arn
        DependsOn:
          - RekognitionBucket
          - BootstrapExecutionRoleS3
  
  # Bootstrap Lambda function that triggers Lambda via SNS to create default MP3 voice message if no face match is found
  LambdaBootstrapCreateSNSMsg:
        Type: 'AWS::Lambda::Function'
        Properties:
          Description: Custom resource function to create an SNS Message for Default MP3 if no match is found
          FunctionName: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - LambdaBootstrapCreateSNSMsg
          Handler: index.lambda_handler
          Role: !GetAtt 
            - BootstrapExecutionRoleSNS
            - Arn
          Runtime: python2.7
          Timeout: 10
          Environment:
            Variables:
              SNS_TOPIC_ARN: !Ref PollySpeechSNSTopic
          Code:
            ZipFile: !Sub |
              import boto3  
              import json
              import cfnresponse
              import logging
              import traceback
              import os
              
              snsArn = os.environ['SNS_TOPIC_ARN']

              def lambda_handler(event, context):

                    print ('received event:' + json.dumps(event, indent=2))

                    sns = boto3.client('sns')

                    logger = logging.getLogger()

                    if event['RequestType'] == 'Create':
                        try:

                            defaultText = 'I do not know you! Fuck off!'
                            response = {}
                            response['File_name'] = 'No_face_match.mp3'
                            response['Text'] = defaultText

                            # convert dict/json back to string before sending as payload
                            strResponse = json.dumps(response)
                            print("strResponse")
                            print(strResponse)

                            # Publish message to the specified SNS topic
                            sns_response = sns.publish(
                                TopicArn=snsArn,    
                                Message=strResponse,
                            )
                            print("SNS Response")
                            print(sns_response)

                            cfnresponse.send(event, context, "SUCCESS", {})
                        except:
                            logger.error("error: {0}".format(traceback.format_exc()));
                            cfnresponse.send(event, context, "FAILED", {})   
                    else:
                            cfnresponse.send(event, context, "SUCCESS", {})
        Metadata:
          'AWS::CloudFormation::Designer':
            id: c2237c0c-1b0c-4308-8a1f-640c73c09698
  # custom resource that triggers lambda function LambdaBootstrapCreateSNSMsg
  CfBootstrapCreateSNSMsg:
        Type: 'Custom::LambdaBootstrapCreateSNSMsg'
        Version: '1.0'
        Properties:
          ServiceToken: !GetAtt 
            - LambdaBootstrapCreateSNSMsg
            - Arn
        DependsOn:
          - LambdaGenerateVoiceMsgWithPolly
          - BootstrapExecutionRoleSNS
          - PollySpeechSNSTopic
  
  # S3 bucket for Face Rekongition service with upload triggers for the service
  RekognitionBucket:
        Type: 'AWS::S3::Bucket'
        DependsOn:
          - LambdaExecutionRole
        Properties:
          BucketName: !Ref FaceRekognitionBucket
          NotificationConfiguration:
            LambdaConfigurations:
              - Event: 's3:ObjectCreated:*'
                Function: !GetAtt 
                  - LambdaIndexFaces
                  - Arn
                Filter:
                  S3Key:
                    Rules:
                      - Name: prefix
                        Value: index/
                      - Name: suffix
                        Value: .jpg

              - Event: 's3:ObjectCreated:*'
                Function: !GetAtt 
                  - LambdaMatchFacesRekognitionService
                  - Arn
                Filter:
                  S3Key:
                    Rules:
                      - Name: prefix
                        Value: matches/
                      - Name: suffix
                        Value: .jpg
        Metadata:
          'AWS::CloudFormation::Designer':
            id: 84108152-c67c-48b2-8218-b01d5a947b8f
# Stack outputs
Outputs:
  DynamoDBTableName:
    Value: !Ref DynamoDBTableName
    Description: DynamoDB table name
  CollectionName:
    Value: !Ref FaceRekognitionCollectionName
    Description: Rekognition collection name
  FaceRekognitionServiceBucket:
    Value: !Ref FaceRekognitionBucket
    Description: S3 bucket name for the Face Rekognition Service
  PollySpeechSNSTopicARN:
    Description: ARN of the SNS topic used to trigger Polly Speech Synthesis via Lambda
    Value: !Ref PollySpeechSNSTopic
Metadata:
  'AWS::CloudFormation::Designer':
    14614f36-a95d-497e-8ad7-387f8f31678e:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 90
      z: 1
      embeds: []
    a466013b-0159-403b-abb8-d753ee0f3fdf:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 90
      z: 1
      embeds: []
    c2237c0c-1b0c-4308-8a1f-640c73c09698:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 210
      z: 1
      embeds: []
    f32940fc-7666-4ab4-bcf7-3a73bd352908:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 210
      z: 1
      embeds: []
    340f2674-9734-4740-bcec-2597106f835b:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 90
      z: 1
      embeds: []
    04bb069f-14a4-4647-bd01-3bdcde747208:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 210
      z: 1
      embeds: []
    08132226-bebe-4358-8846-4f52a3fd8fc1:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 330
      z: 1
      embeds: []
      isassociatedwith:
        - 04bb069f-14a4-4647-bd01-3bdcde747208
    84108152-c67c-48b2-8218-b01d5a947b8f:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 330
      z: 1
      embeds: []
      dependson:
        - 08132226-bebe-4358-8846-4f52a3fd8fc1
    1e163669-10c9-4a45-8569-1c00c098e7c3:
      size:
        width: 60
        height: 60
      position:
        x: 420
        'y': 90
      z: 0
      embeds: []
    abcf1972-7f77-41f8-8da3-88810ece952d:
      size:
        width: 60
        height: 60
      position:
        x: 530
        'y': 90
      z: 0
      embeds: []
    fb3c0f6f-73fc-4439-b41c-4f9e5b8f2429:
      size:
        width: 60
        height: 60
      position:
        x: 641.5374912593772
        'y': 120.03054171923372
      z: 0
      embeds: []